#!/usr/bin/env ruby
require "slop"
require File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "micro_test"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "micro_test", "color"))

include MicroTest::Color

opts = Slop.parse(:strict => true, :help => true) do
  banner "mt [options]"
  on :p, :path, "The path to the test directory or file.", :argument => true
  on :f, :formatter, "The name of the formatter to use.", :argument => true
  on :pry, "Starts a pry session whenever tests fail."
  on :demo, "Runs the MicroTest test suite."
end

exit if opts[:help]

path = opts[:path] || "test"
path = File.expand_path(File.join(File.dirname(__FILE__), "..", "test")) if opts[:demo]
path = File.join(Dir.pwd, path) unless path =~ /^\//
unless File.exist?(path)
  puts "#{path} not found."
  puts "Please check the path and try again."
  exit
end
if path =~ /\.rb$/
  require path
else
  Dir[File.join(path, "**", "*.rb")].each { |p| require p }
end

formatter_name = opts[:formatter] || "default"
formatter_path = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "micro_test", "formatters", formatter_name + ".rb"))
unless File.exist?(formatter_path)
  puts "#{formatter_path} not found."
  puts "Please check the formatter name and try again."
  exit
end
begin
  require formatter_path
  formatter = MicroTest.const_get("Formatter").new
rescue Exception => ex
  puts "Failed to load the formatter."
  puts ex.message
  exit
end

MicroTest::PRY = !!opts[:pry]
if MicroTest::PRY
  require "pry"
  require "pry-stack_explorer"
  # require "pry-exception_explorer"
  Pry.config.hooks.add_hook :before_session, :print_instructions do
    puts "".rjust(40, "-")
    puts "test '#{MicroTest::Runner.current_test}' #{red "FAIL"}"
    puts "".rjust(40, "-")
    puts "Type #{yellow "up"} to see the line that failed... then"
    puts "     #{magenta "whereami 10"} for more context."
    puts "     #{magenta "edit-method"} to make the fix."
  end
  # EE.enabled = true
  # EE.intercept do |frame , ex|
  #   !ex.is_a?(LoadError)
  # end
end

MicroTest::Runner.run formatter
