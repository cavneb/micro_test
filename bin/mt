#!/usr/bin/env ruby
require "rubygems"
require "slop"
lib_path = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
require File.join(lib_path, "micro_test")
require File.join(lib_path, "micro_test", "color")

include MicroTest::Color

opts = Slop.parse(:strict => true, :help => true) do
  formatters = Dir[File.join(lib_path, "micro_test", "formatters", "*.rb")].map {|f| f[f.rindex("/") + 1..-4]}
  banner "mt [options]"
  on :p, :path, "The path to the test directory or file.", :argument => true
  on :f, :formatter, "The name of the formatter to use. [#{green formatters.join(", ")}]", :argument => true
  on "fail-fast", "Stops the running of tests after the first test failure."
  on :pry, "Starts a pry session whenever tests fail."
  on :demo, "Runs the MicroTest test suite."
end

exit if opts[:help]

path = opts[:path] || "test"
path = File.expand_path(File.join(File.dirname(__FILE__), "..", "test")) if opts[:demo]
path = File.join(Dir.pwd, path) unless path =~ /^\//
unless File.exist?(path)
  puts "#{path} not found."
  puts "Please check the path and try again."
  exit
end
if path =~ /\.rb$/
  require path
else
  Dir[File.join(path, "**", "*.rb")].each do |p|
    require p unless p =~ /fail\.rb$/ && opts[:demo].nil?
  end
end

formatter_name = opts[:formatter] || "default_async"
formatter_name = "documentation" if formatter_name == "d"
formatter_path = File.join(lib_path, "micro_test", "formatters", formatter_name + ".rb")
unless File.exist?(formatter_path)
  puts "#{formatter_path} not found."
  puts "Please check the formatter name and try again."
  exit
end
begin
  require formatter_path
  formatter = MicroTest.const_get("Formatter").new
rescue Exception => ex
  puts "Failed to load the formatter."
  puts ex.message
  exit
end

MicroTest::Runner.new(formatter).run
